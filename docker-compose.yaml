version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
    ports:
      - '3099:8080'

  auth-db:
    image: postgres
    container_name: auth-db
    volumes:
      - .local/auth-db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: auth
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "auth"]
      timeout: 45s
      interval: 10s
      retries: 10


  auth-web:
    build: popug-inventory/auth
    container_name: auth-web
    command: [ 'rails', 'server', '-p', '3000', '-b', '0.0.0.0' ]
    depends_on:
      auth-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      RAILS_ENV: 'development'
      DATABASE_URL: 'postgres://auth:auth@auth-db:5432/auth'
      KAFKA_URL: 'kafka://broker:29092'
      BROKER_ADAPTER: 'kafka'
    ports:
      - '3000:3000'

  task-tracker-web:
    image: task-tracker:last
    build:
      context: task-tracker
    container_name: task-tracker-web
    depends_on:
      task-tracker-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://tasktracker:tasktracker@task-tracker-db:5432/tasktracker
      AUTH_OAUTH_CLIENT_ID: XzU4skVQWMvtWYwtIXmTg42_mZNUU7LNWCSu4bNN_DU
      AUTH_OAUTH_CLIENT_SECRET: SQcwoSv9gt1d5s7d_4gaCYgCQ0Lecz-1nrh0F8rZc-E
      AUTH_URL: http://localhost:3000
      AUTH_INTERNAL_URL: http://auth-web:3000
      EVENT_STREAMING_BOOTSTRAP_SERVERS: broker:29092
      EVENT_STREAMING_SCHEMAS_DIRECTORY: /schemas
    volumes:
      - ./task-tracker:/app
      - ./common:/common
      - ./schemas:/schemas
    command: ["uvicorn", "task_tracker.web_server:app", "--host", "0.0.0.0", "--reload"]
    ports:
      - '3001:8000'

  task-tracker-event-consumer:
    image: task-tracker:last
    container_name: task-tracker-consumer
    depends_on:
      task-tracker-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://tasktracker:tasktracker@task-tracker-db:5432/tasktracker
      EVENT_STREAMING_BOOTSTRAP_SERVERS: broker:29092
      EVENT_STREAMING_SCHEMAS_DIRECTORY: /schemas
    volumes:
      - ./task-tracker:/app
      - ./common:/common
      - ./schemas:/schemas
    command: ["python", "-m", "task_tracker.event_streaming"]

  task-tracker-db:
    image: postgres
    container_name: task-tracker-db
    volumes:
      - .local/task-tracker-db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: tasktracker
      POSTGRES_USER: tasktracker
      POSTGRES_PASSWORD: tasktracker
    ports:
      - '3002:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "tasktracker"]
      timeout: 45s
      interval: 10s
      retries: 10

  accounting-web:
    image: accounting:last
    build: accounting
    container_name: accounting-web
    environment:
      AUTH_OAUTH_CLIENT_ID: VzgL5jPx9_ZuaYNXTvj8yHjdf00e6ESLjMs5XsWOnjI
      AUTH_OAUTH_CLIENT_SECRET: UBOaF8YpjdPKnsHQAxFRKFU2mtX8-TxzMiiTc0QQxgM
      AUTH_URL: http://localhost:3000
      AUTH_INTERNAL_URL: http://auth-web:3000
      DATABASE_URL: postgresql+asyncpg://accounting:accounting@accounting-db:5432/accounting
      EVENT_STREAMING_BOOTSTRAP_SERVERS: broker:29092
      EVENT_STREAMING_SCHEMAS_DIRECTORY: /schemas
    depends_on:
      task-tracker-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    command: [ "uvicorn", "accounting.web_server.main:app", "--host", "0.0.0.0", "--reload" ]
    ports:
      - '3004:8000'
    volumes:
      - ./accounting:/app
      - ./common:/common
      - ./schemas:/schemas

  accounting-event-consumer:
    image: accounting:last
    container_name: accounting-consumer
    depends_on:
      accounting-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://accounting:accounting@accounting-db:5432/accounting
      EVENT_STREAMING_BOOTSTRAP_SERVERS: broker:29092
      EVENT_STREAMING_SCHEMAS_DIRECTORY: /schemas
    volumes:
      - ./accounting:/app
      - ./common:/common
      - ./schemas:/schemas
    command: ["python", "-m", "accounting.event_consuming"]

  accounting-db:
    image: postgres
    container_name: accounting-db
    volumes:
      - .local/accounting-db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: accounting
      POSTGRES_USER: accounting
      POSTGRES_PASSWORD: accounting
    ports:
      - '3003:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "accounting"]
      timeout: 45s
      interval: 10s
      retries: 10

  analytics-db:
    image: postgres
    container_name: analytics-db
    volumes:
      - .local/analytics-db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: analytics
      POSTGRES_PASSWORD: analytics
    ports:
      - '3005:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "analytics"]
      timeout: 45s
      interval: 10s
      retries: 10

  analytics-event-consumer:
    image: analytics:last
    build: analytics
    container_name: analytics-consumer
    depends_on:
      analytics-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://analytics:analytics@analytics-db:5432/analytics
      EVENT_STREAMING_BOOTSTRAP_SERVERS: broker:29092
      EVENT_STREAMING_SCHEMAS_DIRECTORY: /schemas
    volumes:
      - ./analytics:/app
      - ./common:/common
      - ./schemas:/schemas
    command: ["python", "-m", "analytics.event_consuming"]

  analytics-web:
    image: analytics:last
    container_name: analytics-web
    environment:
      AUTH_OAUTH_CLIENT_ID: JgizKBjJFcNlKn7yQqHYg5iQ6aiSqV0g0XlbgQa29V4
      AUTH_OAUTH_CLIENT_SECRET: q9-NuulvvwHEOFAxZ6ReXiHR-9gunulMo0OGgm_l04Y
      AUTH_URL: http://localhost:3000
      AUTH_INTERNAL_URL: http://auth-web:3000
      DATABASE_URL: postgresql+asyncpg://analytics:analytics@analytics-db:5432/analytics
      EVENT_STREAMING_BOOTSTRAP_SERVERS: broker:29092
      EVENT_STREAMING_SCHEMAS_DIRECTORY: /schemas
    depends_on:
      task-tracker-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    command: [ "uvicorn", "analytics.web_server.main:app", "--host", "0.0.0.0", "--reload" ]
    ports:
      - '3006:8000'
    volumes:
      - ./analytics:/app
      - ./common:/common
      - ./schemas:/schemas
